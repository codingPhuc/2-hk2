# -*- coding: utf-8 -*-
"""lab3_521H0509.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KqGSG5UicTTeiG_HQgUQBd3eVz7KGHrD
"""

#EX1 

print ("D is ’Fishes ’")
print ("P is ’need to water to survive ’")
print (" Formal form : For all x in D, P(x)")

print ("D is ’person ’")
print ("P is ’who is left handed’")
print (" Formal form : exists x in D, P(x)")

print ("D is an employee in the company, ’")
print ("P is ’who is late to work everyday.’")
print (" Formal form : exists x in D, P(x)")

print ("D is fishes in this pond, ’")
print ("P is ’they are Koi fish.’")
print (" Formal form : for all x in D, P(x)")

print ("D is ’least one creature in the ocean, ’")
print ("P is ’it can live on land’")
print (" Formal form : exists x in D, P(x)")

print ("D is ’students in class A’")
print ("P is ’did not pass the test’")
print (" Formal form : for all x in D, P(x)")

def formalConvert(S):
    # Extract D and P from the statement
    if S.startswith("For all"):
        D = S.split("For all ")[1].split(", ")[0]
        P = S.split(", ")[1]
    elif S.startswith("Exist"):
        D = S.split("Exist ")[1].split(", ")[0]
        P = S.split(", who ")[1]
    elif S.startswith("There is at least one"):
        D = S.split("There is at least one ")[1].split(" ")[0]
        P = S.split(" it ")[1]
    else:
        raise ValueError("Invalid input statement")

    # Convert the statement into formal form
    if S.startswith("For all"):
        F = "For all x in " + D + ", " + P.replace("they", "x")
    elif S.startswith("Exist"):
        F = "Exist x in " + D + ", " + P.replace("who", "x")
    elif S.startswith("There is at least one"):
        F = "Exist x in " + D + ", " + P.replace("it", "x")

    return D, P, F


S = "For all fishes, they need water to survive."
D, P, F = formalConvert(S)
print("D is:", D)
print("P is:", P)
print("Formal form is:", F)




# (a) For all people, if they are blond then they are westerners.
D = "people"
P = "are blond"
Q = "are westerners"
formal = "For all x in {}, if x {} then x {}.".format(D, P, Q)
print("D is:", D)
print("P is:", P)
print("Q is:", Q)
print("Formal form is:", formal)

# (b) Exist a person, whose hair is black but is a westerner.
D = "people"
P = "has black hair"
Q = "is westerner"
formal = "Exist x in {}, such that x {} and x {}.".format(D, P, Q)
print("D is:", D)
print("P is:", P)
print("Q is:", Q)
print("Formal form is:", formal)

# (c) For all students, if they study correctly then they have high score.
D = "students"
P = "study correctly"
Q = "have high score"
formal = "For all x in {}, if x {} then x {}.".format(D, P, Q)
print("D is:", D)
print("P is:", P)
print("Q is:", Q)
print("Formal form is:", formal)

# (d) For every mammal, if they live in the sea, they are either dolphins or whales.
D = "mammals"
P = "live in the sea"
Q = "are dolphins"
R = "are whales"
formal = "For all x in {}, if x {} then (x {} or x {}).".format(D, P, Q, R)
print("D is:", D)
print("P is:", P)
print("Q is:", Q, "and", "R is:", R)
print("Formal form is:", formal)

# (e) For every bird, if they don’t have wings and can swim then they are penguins.
D = "birds"
P = "don't have wings and can swim"
Q = "are penguins"
formal = "For all x in {}, if x {} then x {}.".format(D, P, Q)
print("D is:", D)
print("P is:", P)
print("Q is:", Q)
print("Formal form is:", formal)

# (f) Exist a bird, who have wing but can’t fly.
D = "birds"
P = "have wings"
Q = "can't fly"
formal = "Exist x in {}, such that x {} and x {}.".format(D, P, Q)
print("D is:", D)
print("P is:", P)
print("Q is:", Q)
print("Formal form is:", formal)

def formalConvertPQ(S):
    # Remove punctuation marks and convert to lower case
    S = S.replace(",", "").replace(".", "").lower()
    # Split the statement into words
    words = S.split()
    # Find the indices of the keywords
    for_all_idx = words.index("for") if "for" in words else None
    exist_idx = words.index("exist") if "exist" in words else None
    comma_idx = words.index(",") if "," in words else None
    if for_all_idx is not None:
        # For all statement
        D = " ".join(words[for_all_idx+2:comma_idx])
        P = " ".join(words[comma_idx+1:])
        Q = None
        F = "For all x in {}, if x {} then {}.".format(D, P, Q)
    elif exist_idx is not None:
        # Exist statement
        D = " ".join(words[exist_idx+2:comma_idx])
        P = " ".join(words[comma_idx+1:])
        Q = None
        F = "Exist x in {}, such that x {} and {}.".format(D, P, Q)
    else:
        # Invalid statement
        D = None
        P = None
        Q = None
        F = None
    return D, P, Q, F
