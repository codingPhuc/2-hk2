# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k0qH38oAc_UFbDz0qD2SmImh50SFhxbm
"""
solution = 15*2 + 7*8 
print(solution)
solution = 20 -15 +15*2
print(solution)


solution = 20 +30 - 3*15 +5 +pow(5,2)
print(solution)


solution = (4/6 +2/6)/(5/2 +1/2)
print(solution)


solution = 14/2 + 7 
print(solution)


solution = 5*2/(5-20*pow(3,2)+30) 
print(solution)

#ex 2
solution = 15*2 + 7*8 
print("15*2 + 7*8 =" + str(solution))

solution = 20 -15 +15*2
print("20 -15 +15*2 =" + str(solution))


solution = 20 +30 - 3*15 +5 +pow(5,2)
print("20 +30 - 3*15 +5 +pow(5,2)=" + str(solution))



solution = (4/6 +2/6)/(5/2 +1/2)
print("(4/6 +2/6)/(5/2 +1/2)=" + str(solution))


solution = 14/2 + 7 
print("14/2 + 7 =" + str(solution))



solution = 5*2/(5-20*pow(3,2)+30) 
print(" 5*2/(5-20*pow(3,2)+30) =" + str(solution))

def function(N):
  sum =0
  if( N < 0):
    return  0
  for i in range(0,N+1):
    sum = sum + i;
  return sum 
print(function(2))

def  function_space(str):
  list = str.split()
  join_list=  "".join(list)
  return join_list
print(function_space("Input your string"))

def  function__(str):
  list = str.split()
  join_list=  "_".join(list)
  return join_list
print(function__("Input your string"))

def function_numberCal(str):
  if "+" in str :
    list = str.split("+")
    return int(list[0]) + int(list[1])
  if "-" in str :
    list = str.split("-")
    return int(list[0]) - int(list[1])


  if "*" in str :
    list = str.split("*")
    return int(list[0]) * int(list[1])


  if "/" in str :
    list = str.split("/")
    return int(list[0]) / int(list[1]) 
print(function_numberCal("2-3"))

import operator
ops = {
    '+' : operator.add,
    '-' : operator.sub,
    '*' : operator.mul,
    '/' : operator.truediv,  # use operator.div for Python 2
    '%' : operator.mod,
    '^' : operator.xor,
}
def function_dicntionary(str):
  arr = list(str)
  num1 , num2  = int(arr[0]) , int(arr[2]); 
  return ops[arr[1]](num1, num2)


print(function_dicntionary("2+3"))

A = [[1, 4, 5, 12], 
    [-5, 8, 9, 0],
    [-6, 7, 11, 19]]
B = [[1, 4, 5, 12], 
    [-5, 8, 9, 0],
    [-6, 7, 11, 19]]

def function_matrix(A,B): 
  if(len(A)!=len(B) or len(A[0])!=len(B[0]))  :
    return "Matrix dimension error"; 

  else :
    C = [[0 for a in range(len(A[0]))]for y in range(len(A))]
    for i in range(0, len(A)):

      for j in range(0, len(A[0])):
        C[i][j]= A[i][j]+ B[i][j]
  return C
print(function_matrix(A,B))

A = [[1, 2],
     [3, 4]]
B =[[5, 6],
    [7, 8]]

def  function_matrixProduct (A,B) : 
  if( len(A[0])!=len(B))  :
    return "Matrix dimension error";
  C = [[0 for a in range(len(A[0]))]for y in range(len(B))]
  for i in range(0, len(A)):
        for j in range(0, len(B[0])):
            for k in range(0, len(B)):
              C[i][j] += A[i][k] * B[k][j]
  return C ; 
print(function_matrixProduct(A,B))

def ithCombine(p,q) : 
  return "if" + p +",then "+q 
def panqCombine(p,q):
  return  p +", and not "+q  
def npoqCombine(p,q):
  return "not " +p +",or "+ q
print(panqCombine("it sunny", "i go camping"))

 
